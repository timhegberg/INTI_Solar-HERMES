{%- render 'section-spacing-collapsing' -%}

<style>
  /* Reset default section constraints */
  #shopify-section-{{ section.id }} {
    width: 100% !important;
    max-width: none !important;
  }

  #shopify-section-{{ section.id }} > * {
    max-width: none !important;
  }

  /* Custom styles */
  .product-customization-container {
    background: {{ section.settings.custom_background | default: '#f5f5f5' }};
    padding: 60px 20px;
    min-height: 600px;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    margin: 0;
  }

  .product-customization-wrapper {
    max-width: {{ section.settings.max_width | default: '1400' }}px;
    width: 100%;
    margin: 0 auto;
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 80px;
    align-items: center;
  }

  @media screen and (max-width: 768px) {
    .product-customization-wrapper {
      grid-template-columns: 1fr;
      gap: 30px;
      text-align: center;
    }

    .product-media-section {
      order: 2;
    }

    .product-info-custom {
      order: 1;
    }
  }

  .product-media-section {
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
  }

  #product-image-container {
    position: relative;
    width: 100%;
    max-width: 500px;
    aspect-ratio: 1;
  }

  .product-variant-image {
    width: 100%;
    height: 100%;
    object-fit: contain;
    position: absolute;
    top: 0;
    left: 0;
    transition: opacity 0.3s ease;
  }

  .product-variant-image.hidden {
    opacity: 0;
    pointer-events: none;
  }

  .product-info-custom {
    max-width: 600px;
  }

  .customize-heading {
    font-size: {{ section.settings.heading_size | default: '36' }}px;
    font-weight: 400;
    margin-bottom: 30px;
    color: {{ section.settings.heading_color | default: '#1a1a1a' }};
    line-height: 1.3;
  }

  @media screen and (max-width: 768px) {
    .customize-heading {
      font-size: 24px;
      text-align: center;
    }
  }

  .customization-options {
    display: flex;
    gap: 40px;
    margin-bottom: 40px;
    justify-content: flex-start;
  }

  @media screen and (max-width: 768px) {
    .customization-options {
      justify-content: center;
      gap: 20px;
    }
  }

  .custom-option {
    text-align: center;
    flex: 0 0 auto;
  }

  .custom-option-icon {
    width: 50px;
    height: 50px;
    margin: 0 auto 10px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .custom-option-icon svg {
    width: 40px;
    height: 40px;
    stroke: {{ section.settings.icon_color | default: '#4fc3f7' }};
    fill: none;
    stroke-width: 1.5;
  }

  .custom-option-text {
    font-size: 13px;
    color: {{ section.settings.feature_text_color | default: '#666' }};
    line-height: 1.3;
  }

  .color-selection {
    margin-bottom: 25px;
  }

  .color-label {
    font-size: 14px;
    color: {{ section.settings.label_color | default: '#333' }};
    margin-bottom: 12px;
  }

  .color-options {
    display: flex;
    gap: 12px;
    flex-wrap: wrap;
  }

  .color-option {
    width: 45px;
    height: 45px;
    border-radius: {{ section.settings.swatch_border_radius | default: '6' }}px;
    cursor: pointer;
    position: relative;
    transition: all 0.2s;
    border: 2px solid transparent;
  }

  .color-option:hover {
    transform: scale(1.05);
  }

  .color-option.selected {
    border-color: {{ section.settings.selected_color | default: '#4fc3f7' }};
    box-shadow: 0 0 0 1px {{ section.settings.selected_color | default: '#4fc3f7' }};
  }

  /* Default color styles */
  .color-option[data-color*="hite"],
  .color-option[data-color*="HITE"] {
    background: #f0f0f0;
    border: 1px solid #ddd;
  }

  .color-option[data-color*="lack"],
  .color-option[data-color*="LACK"] {
    background: #1a1a1a;
  }

  .color-option[data-color*="ray"],
  .color-option[data-color*="RAY"],
  .color-option[data-color*="rey"],
  .color-option[data-color*="REY"] {
    background: #8e8e8e;
  }

  .color-option[data-color*="ed"],
  .color-option[data-color*="ED"] {
    background: #e53935;
  }

  .color-option[data-color*="lue"],
  .color-option[data-color*="LUE"] {
    background: #1976d2;
  }

  .color-option[data-color*="reen"],
  .color-option[data-color*="REEN"] {
    background: #4caf50;
  }

  .color-option[data-color*="ellow"],
  .color-option[data-color*="ELLOW"] {
    background: #fdd835;
  }

  .color-option[data-color*="range"],
  .color-option[data-color*="RANGE"] {
    background: #ff6f00;
  }

  .color-option[data-color*="urple"],
  .color-option[data-color*="URPLE"] {
    background: #7b1fa2;
  }

  .color-option[data-color*="ink"],
  .color-option[data-color*="INK"] {
    background: #e91e63;
  }

  .color-option[data-color*="rown"],
  .color-option[data-color*="ROWN"] {
    background: #795548;
  }

  .seat-color-selection {
    margin-bottom: 40px;
  }

  .seat-color-options {
    display: flex;
    gap: 15px;
    flex-wrap: wrap;
  }

  .seat-color-option {
    width: 65px;
    height: 65px;
    border-radius: 8px;
    cursor: pointer;
    position: relative;
    overflow: hidden;
    transition: all 0.2s;
    border: 2px solid transparent;
  }

  .seat-color-option:hover {
    transform: scale(1.05);
  }

  .seat-color-option.selected {
    border-color: {{ section.settings.selected_color | default: '#4fc3f7' }};
    box-shadow: 0 0 0 1px {{ section.settings.selected_color | default: '#4fc3f7' }};
  }

  .seat-color-option img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .diagonal-split {
    width: 100%;
    height: 100%;
    position: relative;
  }

  .diagonal-split::before,
  .diagonal-split::after {
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
  }

  .diagonal-split::before {
    background: var(--color1);
    clip-path: polygon(0 0, 100% 0, 0 100%);
  }

  .diagonal-split::after {
    background: var(--color2);
    clip-path: polygon(100% 0, 100% 100%, 0 100%);
  }

  /* Auto-detect seat colors from variant names */
  .seat-color-option[data-value*="Red"] { --color1: #e53935; }
  .seat-color-option[data-value*="Black"] { --color2: #1a1a1a; }
  .seat-color-option[data-value*="White"] { --color1: #f0f0f0; }
  .seat-color-option[data-value*="Blue"] { --color1: #1976d2; }
  .seat-color-option[data-value*="Gray"] { --color1: #8e8e8e; }
  .seat-color-option[data-value*="Grey"] { --color1: #8e8e8e; }
  .seat-color-option[data-value*="Green"] { --color1: #4caf50; }
  .seat-color-option[data-value*="Brown"] { --color1: #795548; }
  .seat-color-option[data-value*="Tan"] { --color1: #d4a574; }
  .seat-color-option[data-value*="Beige"] { --color1: #f5deb3; }

  /* If only one color, use solid background */
  .seat-color-option:not([data-value*="/"]) .diagonal-split::before {
    clip-path: none;
  }
  .seat-color-option:not([data-value*="/"]) .diagonal-split::after {
    display: none;
  }

  .price-reservation {
    text-align: left;
  }

  @media screen and (max-width: 768px) {
    .price-reservation {
      text-align: center;
    }
  }

  .product-price {
    font-size: 32px;
    font-weight: 400;
    margin-bottom: 5px;
    color: {{ section.settings.price_color | default: '#1a1a1a' }};
  }

  .price-note {
    font-size: 12px;
    color: {{ section.settings.price_note_color | default: '#666' }};
    margin-bottom: 20px;
  }

  .reservation-text {
    font-size: 16px;
    color: {{ section.settings.reservation_text_color | default: '#333' }};
    margin-bottom: 20px;
  }

  .reservation-amount {
    color: {{ section.settings.reservation_amount_color | default: '#4fc3f7' }};
    font-weight: 500;
  }

  .reserve-button {
    background: {{ section.settings.button_background | default: '#4fc3f7' }};
    color: {{ section.settings.button_text_color | default: '#ffffff' }};
    padding: 14px 32px;
    border: none;
    border-radius: 8px;
    font-size: 16px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s;
    width: 100%;
    max-width: 280px;
  }

  .reserve-button:hover {
    background: {{ section.settings.button_hover_background | default: '#29b6f6' }};
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  }

  @media screen and (max-width: 768px) {
    .reserve-button {
      max-width: 100%;
    }
  }

  /* Hide the original product form */
  .product-form-container {
    position: absolute;
    left: -9999px;
    visibility: hidden;
  }
</style>

{%- capture product_form_id -%}product-form-{{ product.id }}-{{ section.id }}{%- endcapture -%}

{%- comment -%}
  Determine which option is body color and which is seat color
{%- endcomment -%}
{%- assign body_color_option_index = nil -%}
{%- assign seat_color_option_index = nil -%}

{%- for option in product.options_with_values -%}
  {%- assign option_name_downcase = option.name | downcase -%}
  {%- if option_name_downcase contains 'body' or option_name_downcase == 'color' -%}
    {%- assign body_color_option_index = forloop.index0 -%}
  {%- elsif option_name_downcase contains 'seat' or option_name_downcase contains 'interior' -%}
    {%- assign seat_color_option_index = forloop.index0 -%}
  {%- endif -%}
{%- endfor -%}

{%- comment -%}
  If not found by name, use position (first option = body color, second = seat color)
{%- endcomment -%}
{%- if body_color_option_index == nil and product.options_with_values.size > 0 -%}
  {%- assign body_color_option_index = 0 -%}
{%- endif -%}
{%- if seat_color_option_index == nil and product.options_with_values.size > 1 -%}
  {%- assign seat_color_option_index = 1 -%}
{%- endif -%}

<!-- Full width container without any constraining wrappers -->
<div class="product-customization-container">
  <div class="product-customization-wrapper">
    <!-- Product Media Section -->
    <div class="product-media-section">
      <div id="product-image-container">
        {%- if product.media.size > 0 -%}
          {%- comment -%} Show variant images {%- endcomment -%}
          {%- for variant in product.variants -%}
            {%- if variant.featured_media -%}
              <img 
                data-variant-id="{{ variant.id }}"
                src="{{ variant.featured_media | image_url: width: 1000 }}"
                loading="{% if variant == product.selected_or_first_available_variant %}eager{% else %}lazy{% endif %}"
                widths="350,500,700,1000"
                class="product-variant-image {% unless variant == product.selected_or_first_available_variant %}hidden{% endunless %}"
                alt="{{ product.title }} - {{ variant.title }}"
              >
            {%- endif -%}
          {%- endfor -%}
          
          {%- comment -%} Fallback to featured image if no variant images {%- endcomment -%}
          {%- assign has_variant_images = false -%}
          {%- for variant in product.variants -%}
            {%- if variant.featured_media -%}
              {%- assign has_variant_images = true -%}
              {%- break -%}
            {%- endif -%}
          {%- endfor -%}
          
          {%- unless has_variant_images -%}
            <img 
              data-variant-id="default"
              src="{{ product.featured_media | image_url: width: 1000 }}"
              loading="eager"
              widths="350,500,700,1000"
              class="product-variant-image"
              alt="{{ product.title }}"
            >
          {%- endunless -%}
        {%- endif -%}
      </div>
    </div>

    <!-- Product Info Section -->
    <div class="product-info-custom">
      <h1 class="customize-heading">
        {%- if section.settings.custom_heading != blank -%}
          {{ section.settings.custom_heading | replace: '[product_title]', product.title | newline_to_br }}
        {%- else -%}
          Customize your<br>
          {{ product.title }}
        {%- endif -%}
      </h1>
      
      <!-- Customization Options -->
      {%- if section.settings.show_features -%}
        <div class="customization-options">
          {%- assign feature_blocks = section.blocks | where: 'type', 'feature' -%}
          {%- if feature_blocks.size == 0 -%}
            <!-- Default features if no blocks added -->
            <div class="custom-option">
              <div class="custom-option-icon">
                <svg viewBox="0 0 24 24" fill="none">
                  <rect x="3" y="3" width="18" height="18" rx="2" stroke-width="1.5" />
                  <path d="M3 9h18M9 21V9" stroke-width="1.5" />
                </svg>
              </div>
              <div class="custom-option-text">
                70 mile<br>battery<br>range
              </div>
            </div>
            <div class="custom-option">
              <div class="custom-option-icon">
                <svg viewBox="0 0 24 24" fill="none">
                  <circle cx="12" cy="12" r="9" stroke-width="1.5" />
                  <path d="M12 7v5l3 3" stroke-width="1.5" />
                </svg>
              </div>
              <div class="custom-option-text">
                Travel<br>up to<br>25 mph
              </div>
            </div>
            <div class="custom-option">
              <div class="custom-option-icon">
                <svg viewBox="0 0 24 24" fill="none">
                  <circle cx="12" cy="12" r="9" stroke-width="1.5" />
                  <circle cx="12" cy="12" r="3" stroke-width="1.5" />
                  <path d="M12 3v3M12 18v3M3 12h3M18 12h3" stroke-width="1.5" />
                </svg>
              </div>
              <div class="custom-option-text">
                35 Free<br>Solar<br>Miles<br>Daily
              </div>
            </div>
          {%- else -%}
            {%- for block in feature_blocks -%}
              <div class="custom-option">
                <div class="custom-option-icon">
                  {%- if block.settings.icon_svg != blank -%}
                    {{ block.settings.icon_svg }}
                  {%- else -%}
                    <svg viewBox="0 0 24 24" fill="none">
                      <rect x="3" y="3" width="18" height="18" rx="2" stroke-width="1.5" />
                      <path d="M3 9h18M9 21V9" stroke-width="1.5" />
                    </svg>
                  {%- endif -%}
                </div>
                <div class="custom-option-text">
                  {{ block.settings.text | newline_to_br }}
                </div>
              </div>
            {%- endfor -%}
          {%- endif -%}
        </div>
      {%- endif -%}

      <!-- Body Color Selection (from product variants) -->
      {%- if body_color_option_index != nil -%}
        {%- assign body_color_option = product.options_with_values[body_color_option_index] -%}
        {%- if body_color_option and body_color_option.values.size > 0 -%}
          <div class="color-selection">
            <div class="color-label">{{ section.settings.body_color_label | default: 'Select body color:' }}</div>
            <div class="color-options" id="body-color-options">
              {%- for color in body_color_option.values -%}
                <div 
                  class="color-option {% if forloop.first %}selected{% endif %}" 
                  data-color="{{ color }}" 
                  data-value="{{ color }}"
                  data-option-index="{{ body_color_option_index }}"
                ></div>
              {%- endfor -%}
            </div>
          </div>
        {%- endif -%}
      {%- endif -%}

      <!-- Seat Color Selection (from product variants) -->
      {%- if seat_color_option_index != nil -%}
        {%- assign seat_color_option = product.options_with_values[seat_color_option_index] -%}
        {%- if seat_color_option and seat_color_option.values.size > 0 -%}
          <div class="seat-color-selection">
            <div class="color-label">{{ section.settings.seat_color_label | default: 'Select seat color:' }}</div>
            <div class="seat-color-options" id="seat-color-options">
              {%- for seat_color in seat_color_option.values -%}
                <div 
                  class="seat-color-option {% if forloop.first %}selected{% endif %}" 
                  data-value="{{ seat_color }}"
                  data-option-index="{{ seat_color_option_index }}"
                >
                  {%- comment -%} Check if we have custom images for seat colors {%- endcomment -%}
                  {%- assign seat_image_found = false -%}
                  {%- for block in section.blocks -%}
                    {%- if block.type == 'seat_color' and block.settings.variant_value == seat_color and block.settings.image != blank -%}
                      <img src="{{ block.settings.image | image_url: width: 130 }}" alt="{{ seat_color }}">
                      {%- assign seat_image_found = true -%}
                      {%- break -%}
                    {%- endif -%}
                  {%- endfor -%}
                  
                  {%- unless seat_image_found -%}
                    {%- if seat_color contains '/' -%}
                      {%- assign colors = seat_color | split: '/' -%}
                      {%- assign color1 = colors[0] | strip -%}
                      {%- assign color2 = colors[1] | strip -%}
                      <div class="diagonal-split" style="--color1: {{ color1 }}; --color2: {{ color2 }};"></div>
                    {%- else -%}
                      <div class="diagonal-split" style="--color1: {{ seat_color }}; --color2: {{ seat_color }};"></div>
                    {%- endif -%}
                  {%- endunless -%}
                </div>
              {%- endfor -%}
            </div>
          </div>
        {%- endif -%}
      {%- endif -%}

      <!-- Price and Reservation -->
      <div class="price-reservation">
        <div class="product-price">
          {%- if section.settings.show_full_price -%}
            {{ product.price | money }}
          {%- else -%}
            {{ section.settings.reservation_price | default: '$100' }}
          {%- endif -%}
        </div>
        <div class="price-note">{{ section.settings.price_note | default: '*Price subject to change' }}</div>
        <div class="reservation-text">
          {{ section.settings.reservation_text | default: "Reserve your's today:" }}
          <span class="reservation-amount">{{ section.settings.reservation_price | default: '$100' }}</span>
        </div>
        <button type="submit" form="{{ product_form_id }}" class="reserve-button">
          {{ section.settings.button_text | default: 'Reserve your' }} {{ product.title }}
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Hidden product form for functionality -->
<div class="product-form-container">
  <product-form>
    <form id="{{ product_form_id }}" method="post" action="/cart/add" accept-charset="UTF-8" enctype="multipart/form-data">
      <input type="hidden" name="form_type" value="product">
      <input type="hidden" name="utf8" value="✓">
      <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
    </form>
  </product-form>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const productImages = document.querySelectorAll('.product-variant-image');
  const variants = {{ product.variants | json }};
  const form = document.getElementById('{{ product_form_id }}');
  const variantInput = form.querySelector('input[name="id"]');
  
  // Handle body color selection
  const bodyColorOptions = document.querySelectorAll('#body-color-options .color-option');
  bodyColorOptions.forEach(option => {
    option.addEventListener('click', function() {
      bodyColorOptions.forEach(opt => opt.classList.remove('selected'));
      this.classList.add('selected');
      updateVariantAndImage();
    });
  });

  // Handle seat color selection
  const seatColorOptions = document.querySelectorAll('#seat-color-options .seat-color-option');
  seatColorOptions.forEach(option => {
    option.addEventListener('click', function() {
      seatColorOptions.forEach(opt => opt.classList.remove('selected'));
      this.classList.add('selected');
      updateVariantAndImage();
    });
  });

  function updateVariantAndImage() {
    // Get selected values
    const selectedOptions = [];
    
    // Get body color
    const selectedBodyColor = document.querySelector('#body-color-options .color-option.selected');
    if (selectedBodyColor) {
      const index = parseInt(selectedBodyColor.getAttribute('data-option-index'));
      selectedOptions[index] = selectedBodyColor.getAttribute('data-value');
    }
    
    // Get seat color
    const selectedSeatColor = document.querySelector('#seat-color-options .seat-color-option.selected');
    if (selectedSeatColor) {
      const index = parseInt(selectedSeatColor.getAttribute('data-option-index'));
      selectedOptions[index] = selectedSeatColor.getAttribute('data-value');
    }
    
    // Find matching variant
    const matchingVariant = variants.find(variant => {
      return variant.options.every((option, index) => {
        return !selectedOptions[index] || option === selectedOptions[index];
      });
    });
    
    if (matchingVariant) {
      // Update form
      variantInput.value = matchingVariant.id;
      
      // Update images
      productImages.forEach(img => img.classList.add('hidden'));
      
      if (matchingVariant.featured_media) {
        const matchingImage = document.querySelector(`[data-variant-id="${matchingVariant.id}"]`);
        if (matchingImage) {
          matchingImage.classList.remove('hidden');
        }
      } else {
        // Show default image if variant has no specific image
        const defaultImage = document.querySelector('[data-variant-id="default"]');
        if (defaultImage) {
          defaultImage.classList.remove('hidden');
        } else if (productImages.length > 0) {
          productImages[0].classList.remove('hidden');
        }
      }
      
      // Trigger Shopify's variant change event
      const event = new Event('change', { bubbles: true });
      form.dispatchEvent(event);
    }
  }
  
  // Initialize
  updateVariantAndImage();
});
</script>

{% schema %}
{
  "name": "Product page",
  "class": "shopify-section--main-product",
  "tag": "section",
  "blocks": [
    {
      "type": "@app"
    },
    {
      "type": "feature",
      "name": "Product Feature",
      "settings": [
        {
          "type": "html",
          "id": "icon_svg",
          "label": "Icon SVG",
          "info": "Paste SVG code for custom icon"
        },
        {
          "type": "textarea",
          "id": "text",
          "label": "Feature text",
          "default": "70 mile\nbattery\nrange"
        }
      ]
    },
    {
      "type": "seat_color",
      "name": "Seat Color Image",
      "settings": [
        {
          "type": "text",
          "id": "variant_value",
          "label": "Variant value",
          "info": "Must match exactly with product variant option",
          "default": "Red/Black"
        },
        {
          "type": "image_picker",
          "id": "image",
          "label": "Seat image",
          "info": "Upload custom image for this seat color"
        }
      ]
    }
  ],
  "settings": [
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "max_width",
      "min": 1000,
      "max": 2000,
      "step": 100,
      "unit": "px",
      "label": "Maximum content width",
      "default": 1400
    },
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "textarea",
      "id": "custom_heading",
      "label": "Custom heading",
      "info": "Use [product_title] to insert product name. Add line breaks for multi-line heading.",
      "default": "Customize your\n[product_title]"
    },
    {
      "type": "checkbox",
      "id": "show_features",
      "label": "Show product features",
      "default": true
    },
    {
      "type": "text",
      "id": "body_color_label",
      "label": "Body color label",
      "default": "Select body color:"
    },
    {
      "type": "text",
      "id": "seat_color_label",
      "label": "Seat color label",
      "default": "Select seat color:"
    },
    {
      "type": "header",
      "content": "Pricing"
    },
    {
      "type": "checkbox",
      "id": "show_full_price",
      "label": "Show full product price",
      "info": "When unchecked, shows reservation price",
      "default": false
    },
    {
      "type": "text",
      "id": "reservation_price",
      "label": "Reservation price",
      "default": "$100"
    },
    {
      "type": "text",
      "id": "price_note",
      "label": "Price note",
      "default": "*Price subject to change"
    },
    {
      "type": "text",
      "id": "reservation_text",
      "label": "Reservation text",
      "default": "Reserve your's today:"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Button text",
      "default": "Reserve your"
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "custom_background",
      "label": "Background",
      "default": "#f5f5f5"
    },
    {
      "type": "color",
      "id": "heading_color",
      "label": "Heading",
      "default": "#1a1a1a"
    },
    {
      "type": "range",
      "id": "heading_size",
      "min": 24,
      "max": 48,
      "step": 2,
      "unit": "px",
      "label": "Heading size",
      "default": 36
    },
    {
      "type": "color",
      "id": "icon_color",
      "label": "Feature icons",
      "default": "#4fc3f7"
    },
    {
      "type": "color",
      "id": "feature_text_color",
      "label": "Feature text",
      "default": "#666666"
    },
    {
      "type": "color",
      "id": "label_color",
      "label": "Label text",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "selected_color",
      "label": "Selected border color",
      "default": "#4fc3f7"
    },
    {
      "type": "range",
      "id": "swatch_border_radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Swatch border radius",
      "default": 6
    },
    {
      "type": "color",
      "id": "price_color",
      "label": "Price",
      "default": "#1a1a1a"
    },
    {
      "type": "color",
      "id": "price_note_color",
      "label": "Price note",
      "default": "#666666"
    },
    {
      "type": "color",
      "id": "reservation_text_color",
      "label": "Reservation text",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "reservation_amount_color",
      "label": "Reservation amount",
      "default": "#4fc3f7"
    },
    {
      "type": "color",
      "id": "button_background",
      "label": "Button background",
      "default": "#4fc3f7"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button text",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "button_hover_background",
      "label": "Button hover background",
      "default": "#29b6f6"
    }
  ]
}
{% endschema %}