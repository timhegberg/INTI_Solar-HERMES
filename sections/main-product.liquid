{%- render 'section-spacing-collapsing' -%}

<style>
  #shopify-section-{{ section.id }} {
    --product-grid: auto / minmax(0, 1fr);
    --product-gallery-media-list-grid: auto / auto-flow {% if section.settings.mobile_carousel_control == 'free_scroll' %}{% if section.settings.mobile_media_size == 'expanded' %}84vw{% else %}73vw{% endif %}{% else %}100%{% endif %};
    --product-gallery-media-list-gap: {% if section.settings.mobile_media_size == 'expanded' %}var(--spacing-0-5){% else %}var(--grid-gutter){% endif %};
  }

  @media screen and (max-width: 999px) {
    #shopify-section-{{ section.id }} {
      --section-spacing-block-start: {% if section.settings.mobile_media_size == 'expanded' %}0px{% else %}var(--container-gutter){% endif %};
    }
  }

  @media screen and (min-width: 1000px) {
    #shopify-section-{{ section.id }} {
      {%- assign media_ratio = section.settings.desktop_media_width | divided_by: 50.0 -%}
      --product-grid: auto / minmax(0, {{ media_ratio }}fr) minmax(0, {{ 2.0 | minus: media_ratio }}fr);
      --product-gallery-media-list-grid: {% if section.settings.desktop_media_layout contains 'grid' %}auto-flow dense / repeat({% if section.settings.desktop_media_layout == 'grid_one' %}1{% else %}2{% endif %}, minmax(0, 1fr)){% else %}auto / auto-flow 100%{% endif %};
      --product-gallery-media-list-gap: calc(var(--grid-gutter) / 2);
    }

    {%- if section.settings.desktop_media_layout == 'grid_highlight' -%}
      #shopify-section-{{ section.id }} .product-gallery__media-list > :not([hidden]) {
        grid-column: span 2;
      }

      #shopify-section-{{ section.id }} .product-gallery__media-list > :not([hidden]) ~ *:not(.product-gallery__media--expand) {
        grid-column: span 1;
      }
    {%- endif -%}
  }

  @media screen and (min-width: 1400px) {
    #shopify-section-{{ section.id }} {
      --product-gallery-media-list-gap: var(--grid-gutter);
    }
  }

  /* Custom styles to match the screenshot */
  .product-customization-container {
    background: {{ section.settings.custom_background | default: '#f5f5f5' }};
    padding: 60px 20px;
    min-height: 600px;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
  }

  .product-customization-wrapper {
    max-width: {{ section.settings.max_width | default: '1200' }}px;
    width: 100%;
    margin: 0 auto;
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 80px;
    align-items: center;
  }

  @media screen and (max-width: 768px) {
    .product-customization-wrapper {
      grid-template-columns: 1fr;
      gap: 30px;
      text-align: center;
    }

    .product-media-section {
      order: 2;
    }

    .product-info-custom {
      order: 1;
    }
  }

  .product-media-section {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .product-media-section img {
    width: 100%;
    max-width: 500px;
    height: auto;
    object-fit: contain;
    transition: opacity 0.3s ease;
  }

  .product-info-custom {
    max-width: 600px;
  }

  .customize-heading {
    font-size: {{ section.settings.heading_size | default: '36' }}px;
    font-weight: 400;
    margin-bottom: 30px;
    color: {{ section.settings.heading_color | default: '#1a1a1a' }};
    line-height: 1.3;
  }

  @media screen and (max-width: 768px) {
    .customize-heading {
      font-size: 24px;
      text-align: center;
    }
  }

  .customization-options {
    display: flex;
    gap: 40px;
    margin-bottom: 40px;
    justify-content: flex-start;
  }

  @media screen and (max-width: 768px) {
    .customization-options {
      justify-content: center;
      gap: 20px;
    }
  }

  .custom-option {
    text-align: center;
    flex: 0 0 auto;
  }

  .custom-option-icon {
    width: 50px;
    height: 50px;
    margin: 0 auto 10px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .custom-option-icon svg {
    width: 40px;
    height: 40px;
    stroke: {{ section.settings.icon_color | default: '#4fc3f7' }};
    fill: none;
    stroke-width: 1.5;
  }

  .custom-option-text {
    font-size: 13px;
    color: {{ section.settings.feature_text_color | default: '#666' }};
    line-height: 1.3;
  }

  .color-selection {
    margin-bottom: 25px;
  }

  .color-label {
    font-size: 14px;
    color: {{ section.settings.label_color | default: '#333' }};
    margin-bottom: 12px;
  }

  .color-options {
    display: flex;
    gap: 12px;
    flex-wrap: wrap;
  }

  .color-option {
    width: 45px;
    height: 45px;
    border-radius: {{ section.settings.swatch_border_radius | default: '6' }}px;
    cursor: pointer;
    position: relative;
    transition: all 0.2s;
    border: 2px solid transparent;
  }

  .color-option:hover {
    transform: scale(1.05);
  }

  .color-option.selected {
    border-color: {{ section.settings.selected_color | default: '#4fc3f7' }};
    box-shadow: 0 0 0 1px {{ section.settings.selected_color | default: '#4fc3f7' }};
  }

  .seat-color-selection {
    margin-bottom: 40px;
  }

  .seat-color-options {
    display: flex;
    gap: 15px;
    flex-wrap: wrap;
  }

  .seat-color-option {
    width: 65px;
    height: 65px;
    border-radius: 8px;
    cursor: pointer;
    position: relative;
    overflow: hidden;
    transition: all 0.2s;
    border: 2px solid transparent;
  }

  .seat-color-option:hover {
    transform: scale(1.05);
  }

  .seat-color-option.selected {
    border-color: {{ section.settings.selected_color | default: '#4fc3f7' }};
    box-shadow: 0 0 0 1px {{ section.settings.selected_color | default: '#4fc3f7' }};
  }

  .seat-color-option img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .diagonal-split {
    width: 100%;
    height: 100%;
    position: relative;
  }

  .diagonal-split::before,
  .diagonal-split::after {
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
  }

  .diagonal-split::before {
    background: var(--color1);
    clip-path: polygon(0 0, 100% 0, 0 100%);
  }

  .diagonal-split::after {
    background: var(--color2);
    clip-path: polygon(100% 0, 100% 100%, 0 100%);
  }

  .price-reservation {
    text-align: left;
  }

  @media screen and (max-width: 768px) {
    .price-reservation {
      text-align: center;
    }
  }

  .product-price {
    font-size: 32px;
    font-weight: 400;
    margin-bottom: 5px;
    color: {{ section.settings.price_color | default: '#1a1a1a' }};
  }

  .price-note {
    font-size: 12px;
    color: {{ section.settings.price_note_color | default: '#666' }};
    margin-bottom: 20px;
  }

  .reservation-text {
    font-size: 16px;
    color: {{ section.settings.reservation_text_color | default: '#333' }};
    margin-bottom: 20px;
  }

  .reservation-amount {
    color: {{ section.settings.reservation_amount_color | default: '#4fc3f7' }};
    font-weight: 500;
  }

  .reserve-button {
    background: {{ section.settings.button_background | default: '#4fc3f7' }};
    color: {{ section.settings.button_text_color | default: '#ffffff' }};
    padding: 14px 32px;
    border: none;
    border-radius: 8px;
    font-size: 16px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s;
    width: 100%;
    max-width: 280px;
  }

  .reserve-button:hover {
    background: {{ section.settings.button_hover_background | default: '#29b6f6' }};
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  }

  @media screen and (max-width: 768px) {
    .reserve-button {
      max-width: 100%;
    }
  }

  /* Hide the original product form */
  .product-form-container {
    display: none;
  }
</style>

{%- capture product_form_id -%}product-form-{{ product.id }}-{{ section.id }}{%- endcapture -%}

<div {% render 'section-properties', tight: true %}>
  <product-rerender id="product-info-{{ product.id }}-{{ section.id }}" observe-form="{{ product_form_id }}" allow-partial-rerender>
    <div class="product">
      <!-- Custom layout matching the screenshot -->
      <div class="product-customization-container">
        <div class="product-customization-wrapper">
          <!-- Product Media Section -->
          <div class="product-media-section">
            <div id="product-image-container">
              {%- if product.media.size > 0 -%}
                {%- for media in product.media -%}
                  {%- if media.media_type == 'image' -%}
                    <img 
                      data-variant-media-id="{{ media.id }}"
                      src="{{ media | image_url: width: 1000 }}"
                      loading="lazy"
                      widths="350,500,700,1000"
                      class="product-main-image"
                      {% unless forloop.first %}style="display: none;"{% endunless %}
                    >
                  {%- endif -%}
                {%- endfor -%}
              {%- endif -%}
            </div>
          </div>

          <!-- Product Info Section -->
          <div class="product-info-custom">
            <h1 class="customize-heading">
              {%- if section.settings.custom_heading != blank -%}
                {{ section.settings.custom_heading | replace: '[product_title]', product.title }}
              {%- else -%}
                Customize your<br>
                {{ product.title }}
              {%- endif -%}
            </h1>
            
            <!-- Customization Options -->
            {%- if section.settings.show_features -%}
              <div class="customization-options">
                {%- for block in section.blocks -%}
                  {%- case block.type -%}
                    {%- when 'feature' -%}
                      <div class="custom-option">
                        <div class="custom-option-icon">
                          {%- if block.settings.icon_svg != blank -%}
                            {{ block.settings.icon_svg }}
                          {%- else -%}
                            <svg viewBox="0 0 24 24" fill="none">
                              <rect x="3" y="3" width="18" height="18" rx="2" stroke-width="1.5" />
                              <path d="M3 9h18M9 21V9" stroke-width="1.5" />
                            </svg>
                          {%- endif -%}
                        </div>
                        <div class="custom-option-text">
                          {{ block.settings.text | newline_to_br }}
                        </div>
                      </div>
                  {%- endcase -%}
                {%- endfor -%}
              </div>
            {%- endif -%}

            <!-- Body Color Selection -->
            <div class="color-selection">
              <div class="color-label">{{ section.settings.body_color_label | default: 'Select body color:' }}</div>
              <div class="color-options" id="body-color-options">
                {%- for block in section.blocks -%}
                  {%- case block.type -%}
                    {%- when 'body_color' -%}
                      <div 
                        class="color-option {% if forloop.first %}selected{% endif %}" 
                        data-color="{{ block.settings.color_name }}" 
                        data-value="{{ block.settings.variant_value }}"
                        style="background: {{ block.settings.color_hex }};"
                      ></div>
                  {%- endcase -%}
                {%- endfor -%}
              </div>
            </div>

            <!-- Seat Color Selection -->
            <div class="seat-color-selection">
              <div class="color-label">{{ section.settings.seat_color_label | default: 'Select seat color:' }}</div>
              <div class="seat-color-options" id="seat-color-options">
                {%- for block in section.blocks -%}
                  {%- case block.type -%}
                    {%- when 'seat_color' -%}
                      <div 
                        class="seat-color-option {% if forloop.first %}selected{% endif %}" 
                        data-value="{{ block.settings.variant_value }}"
                      >
                        {%- if block.settings.image != blank -%}
                          <img src="{{ block.settings.image | image_url: width: 130 }}" alt="{{ block.settings.variant_value }}">
                        {%- elsif block.settings.color1 != blank and block.settings.color2 != blank -%}
                          <div class="diagonal-split" style="--color1: {{ block.settings.color1 }}; --color2: {{ block.settings.color2 }};"></div>
                        {%- else -%}
                          <div style="background: {{ block.settings.color1 | default: '#ccc' }}; width: 100%; height: 100%;"></div>
                        {%- endif -%}
                      </div>
                  {%- endcase -%}
                {%- endfor -%}
              </div>
            </div>

            <!-- Price and Reservation -->
            <div class="price-reservation">
              <div class="product-price">
                {%- if section.settings.show_full_price -%}
                  {{ product.price | money }}
                {%- else -%}
                  {{ section.settings.reservation_price | default: '$100' }}
                {%- endif -%}
              </div>
              <div class="price-note">{{ section.settings.price_note | default: '*Price subject to change' }}</div>
              <div class="reservation-text">
                {{ section.settings.reservation_text | default: "Reserve your's today:" }}
                <span class="reservation-amount">{{ section.settings.reservation_price | default: '$100' }}</span>
              </div>
              <button type="submit" form="{{ product_form_id }}" class="reserve-button">
                {{ section.settings.button_text | default: 'Reserve your' }} {{ product.title }}
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Hidden product form for functionality -->
      <div class="product-form-container">
        {%- render 'product-info', 
          product: product, 
          update_url: true,
          product_form_id: product_form_id,
          context: 'main_product'
        -%}
      </div>
    </div>
  </product-rerender>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const productImages = document.querySelectorAll('#product-image-container img');
  
  // Handle body color selection
  const bodyColorOptions = document.querySelectorAll('#body-color-options .color-option');
  bodyColorOptions.forEach(option => {
    option.addEventListener('click', function() {
      bodyColorOptions.forEach(opt => opt.classList.remove('selected'));
      this.classList.add('selected');
      
      // Update variant and image
      const colorValue = this.getAttribute('data-value');
      updateVariantAndImage();
    });
  });

  // Handle seat color selection
  const seatColorOptions = document.querySelectorAll('#seat-color-options .seat-color-option');
  seatColorOptions.forEach(option => {
    option.addEventListener('click', function() {
      seatColorOptions.forEach(opt => opt.classList.remove('selected'));
      this.classList.add('selected');
      
      // Update variant and image
      const seatValue = this.getAttribute('data-value');
      updateVariantAndImage();
    });
  });

  function updateVariantAndImage() {
    // Get selected values
    const selectedBodyColor = document.querySelector('#body-color-options .color-option.selected');
    const selectedSeatColor = document.querySelector('#seat-color-options .seat-color-option.selected');
    
    if (!selectedBodyColor || !selectedSeatColor) return;
    
    const bodyColorValue = selectedBodyColor.getAttribute('data-value');
    const seatColorValue = selectedSeatColor.getAttribute('data-value');
    
    // Find matching variant
    {% if product.variants.size > 1 %}
      const variants = {{ product.variants | json }};
      const matchingVariant = variants.find(variant => {
        return variant.options.includes(bodyColorValue) && variant.options.includes(seatColorValue);
      });
      
      if (matchingVariant && matchingVariant.featured_media) {
        // Hide all images
        productImages.forEach(img => img.style.display = 'none');
        
        // Show matching image
        const matchingImage = document.querySelector(`[data-variant-media-id="${matchingVariant.featured_media.id}"]`);
        if (matchingImage) {
          matchingImage.style.display = 'block';
        }
      }
    {% endif %}
    
    // Update hidden form selects if they exist
    const colorSelect = document.querySelector('select[name*="Color"], select[name*="color"]');
    if (colorSelect) {
      colorSelect.value = bodyColorValue;
      colorSelect.dispatchEvent(new Event('change', { bubbles: true }));
    }
    
    const seatSelect = document.querySelector('select[name*="Seat"], select[name*="seat"]');
    if (seatSelect) {
      seatSelect.value = seatColorValue;
      seatSelect.dispatchEvent(new Event('change', { bubbles: true }));
    }
  }
});
</script>

{%- assign buy_buttons_block = section.blocks | where: 'type', 'buy_buttons' | first -%}

{%- if section.settings.show_fixed_add_to_cart and product.available and buy_buttons_block != blank -%}
  <product-rerender id="{{ product_form_id }}-sticky-bar" observe-form="{{ product_form_id }}">
    {%- if product.selected_or_first_available_variant.available -%}
      <product-quick-add form="{{ product_form_id }}" class="product-quick-add">
        {%- assign button_label = 'product.general.add_to_cart_button' | t -%}

        <buy-buttons template="{{ product.template_suffix }}" form="{{ product_form_id }}" class="sm:hidden">
          {%- render 'button', type: 'submit', content: button_label, form: product_form_id, background: buy_buttons_block.settings.atc_button_background, text_color: buy_buttons_block.settings.atc_button_text_color, secondary: true, stretch: true, size: 'lg' -%}
        </buy-buttons>

        {%- assign image = product.selected_or_first_available_variant.featured_media | default: product.featured_media -%}

        <div class="product-quick-add__variant {% if image == blank %}no-image{% endif %} hidden sm:grid">
          {%- if image != blank -%}
            <variant-media widths="80,160" form="{{ product_form_id }}">
              {{- image | image_url: width: image.width | image_tag: loading: 'lazy', sizes: '80px', widths: '80,160', class: 'rounded-xs' -}}
            </variant-media>
          {%- endif -%}

          <div class="v-stack gap-0.5">
            {%- assign vendor_block = section.blocks | where: 'type', 'vendor' -%}

            {%- if vendor_block != blank -%}
              {%- render 'vendor' with product.vendor, class: 'text-xs' -%}
            {%- endif -%}

            <a href="{{ product.url }}" class="bold truncate-text">{{ product.title }}</a>
            {%- render 'price-list', product: product, variant: product.selected_or_first_available_variant, form_id: product_form_id -%}
          </div>

          <buy-buttons template="{{ product.template_suffix }}" form="{{ product_form_id }}" force-secondary-button>
            {%- render 'button', type: 'submit', content: button_label, form: product_form_id, background: buy_buttons_block.settings.atc_button_background, text_color: buy_buttons_block.settings.atc_button_text_color, secondary: true -%}
          </buy-buttons>
        </div>
      </product-quick-add>
    {%- endif -%}
  </product-rerender>
{%- endif -%}

{%- comment -%}
IMPLEMENTATION NOTE: Shopify does not currently allows to render a given section within the context of a given product. However,
when rendering the quick buy popovers, we want to be able to re-use the merchant's choices (such as the selector type). This
is however only possible by rendering the whole product page, and extracting the relevant part. Here, we therefore render the
quick buy information in a template, that will be extracted in JS, but ensure it is not visible in the main product page
{%- endcomment -%}

{%- render 'product-quick-buy', product: product -%}

{% schema %}
{
  "name": "Product page",
  "class": "shopify-section--main-product",
  "tag": "section",
  "blocks": [
    {
      "type": "@app"
    },
    {
      "type": "feature",
      "name": "Product Feature",
      "settings": [
        {
          "type": "html",
          "id": "icon_svg",
          "label": "Icon SVG",
          "info": "Paste SVG code for custom icon"
        },
        {
          "type": "text",
          "id": "text",
          "label": "Feature text",
          "default": "70 mile\nbattery\nrange"
        }
      ]
    },
    {
      "type": "body_color",
      "name": "Body Color Option",
      "settings": [
        {
          "type": "text",
          "id": "color_name",
          "label": "Color name",
          "default": "White"
        },
        {
          "type": "text",
          "id": "variant_value",
          "label": "Variant value",
          "info": "Must match exactly with product variant option",
          "default": "White"
        },
        {
          "type": "color",
          "id": "color_hex",
          "label": "Color",
          "default": "#f0f0f0"
        }
      ]
    },
    {
      "type": "seat_color",
      "name": "Seat Color Option",
      "settings": [
        {
          "type": "text",
          "id": "variant_value",
          "label": "Variant value",
          "info": "Must match exactly with product variant option",
          "default": "Red/Black"
        },
        {
          "type": "image_picker",
          "id": "image",
          "label": "Seat image",
          "info": "Upload image to replace color swatches"
        },
        {
          "type": "color",
          "id": "color1",
          "label": "Color 1",
          "default": "#e53935"
        },
        {
          "type": "color",
          "id": "color2",
          "label": "Color 2",
          "default": "#1a1a1a"
        }
      ]
    }
  ],
  "settings": [
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "max_width",
      "min": 900,
      "max": 1600,
      "step": 100,
      "unit": "px",
      "label": "Maximum width",
      "default": 1200
    },
    {
      "type": "checkbox",
      "id": "full_width",
      "label": "Full width",
      "default": true
    },
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "text",
      "id": "custom_heading",
      "label": "Custom heading",
      "info": "Use [product_title] to insert product name",
      "default": "Customize your\n[product_title]"
    },
    {
      "type": "checkbox",
      "id": "show_features",
      "label": "Show product features",
      "default": true
    },
    {
      "type": "text",
      "id": "body_color_label",
      "label": "Body color label",
      "default": "Select body color:"
    },
    {
      "type": "text",
      "id": "seat_color_label",
      "label": "Seat color label",
      "default": "Select seat color:"
    },
    {
      "type": "header",
      "content": "Pricing"
    },
    {
      "type": "checkbox",
      "id": "show_full_price",
      "label": "Show full product price",
      "info": "When unchecked, shows reservation price",
      "default": false
    },
    {
      "type": "text",
      "id": "reservation_price",
      "label": "Reservation price",
      "default": "$100"
    },
    {
      "type": "text",
      "id": "price_note",
      "label": "Price note",
      "default": "*Price subject to change"
    },
    {
      "type": "text",
      "id": "reservation_text",
      "label": "Reservation text",
      "default": "Reserve your's today:"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Button text",
      "default": "Reserve your"
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "custom_background",
      "label": "Background",
      "default": "#f5f5f5"
    },
    {
      "type": "color",
      "id": "heading_color",
      "label": "Heading",
      "default": "#1a1a1a"
    },
    {
      "type": "range",
      "id": "heading_size",
      "min": 24,
      "max": 48,
      "step": 2,
      "unit": "px",
      "label": "Heading size",
      "default": 36
    },
    {
      "type": "color",
      "id": "icon_color",
      "label": "Feature icons",
      "default": "#4fc3f7"
    },
    {
      "type": "color",
      "id": "feature_text_color",
      "label": "Feature text",
      "default": "#666666"
    },
    {
      "type": "color",
      "id": "label_color",
      "label": "Label text",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "selected_color",
      "label": "Selected border color",
      "default": "#4fc3f7"
    },
    {
      "type": "range",
      "id": "swatch_border_radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Swatch border radius",
      "default": 6
    },
    {
      "type": "color",
      "id": "price_color",
      "label": "Price",
      "default": "#1a1a1a"
    },
    {
      "type": "color",
      "id": "price_note_color",
      "label": "Price note",
      "default": "#666666"
    },
    {
      "type": "color",
      "id": "reservation_text_color",
      "label": "Reservation text",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "reservation_amount_color",
      "label": "Reservation amount",
      "default": "#4fc3f7"
    },
    {
      "type": "color",
      "id": "button_background",
      "label": "Button background",
      "default": "#4fc3f7"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button text",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "button_hover_background",
      "label": "Button hover background",
      "default": "#29b6f6"
    },
    {
      "type": "checkbox",
      "id": "show_fixed_add_to_cart",
      "label": "Show add to cart on scroll",
      "default": true
    },
    {
      "type": "header",
      "content": "Media"
    },
    {
      "type": "paragraph",
      "content": "Learn more about [media types](https://help.shopify.com/en/manual/products/product-media)"
    },
    {
      "type": "range",
      "id": "desktop_media_width",
      "label": "Desktop media size",
      "min": 35,
      "max": 65,
      "step": 5,
      "unit": "%",
      "default": 55
    },
    {
      "type": "select",
      "id": "desktop_media_layout",
      "label": "Desktop media layout",
      "options": [
        {
          "value": "grid_one",
          "label": "Grid (1x1)"
        },
        {
          "value": "grid",
          "label": "Grid (2x2)"
        },
        {
          "value": "grid_highlight",
          "label": "Grid (2x2) with highlighted media"
        },
        {
          "value": "carousel_thumbnails_left",
          "label": "Thumbnails left (carousel)"
        },
        {
          "value": "carousel_thumbnails_bottom",
          "label": "Thumbnails bottom (carousel)"
        }
      ],
      "default": "carousel_thumbnails_left"
    },
    {
      "type":"select",
      "id": "mobile_media_size",
      "label": "Mobile media size",
      "options": [
        {
          "value": "expanded",
          "label": "Expanded"
        },
        {
          "value": "contained",
          "label": "Contained"
        }
      ],
      "default": "expanded"
    },
    {
      "type": "select",
      "id": "mobile_carousel_control",
      "label": "Mobile carousel control",
      "options": [
        {
          "value": "dots",
          "label": "Dots"
        },
        {
          "value": "floating_dots",
          "label": "Floating dots"
        },
        {
          "value": "thumbnails",
          "label": "Thumbnails"
        },
        {
          "value": "free_scroll",
          "label": "Free scroll"
        }
      ],
      "default": "floating_dots"
    },
    {
      "type": "checkbox",
      "id": "enable_video_autoplay",
      "label": "Enable video autoplay",
      "info": "Video are muted automatically to allow autoplay. Grid mode on desktop turn off autoplay.",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "enable_video_looping",
      "label": "Enable video looping",
      "default": true
    },
    {
      "type": "header",
      "content": "Image zoom"
    },
    {
      "type": "checkbox",
      "id": "enable_image_zoom",
      "label": "Enable",
      "default": true
    },
    {
      "type": "range",
      "id": "max_image_zoom_level",
      "min": 1,
      "max": 4,
      "step": 0.5,
      "label": "Max zoom level",
      "default": 3
    },
    {
      "type": "header",
      "content": "Colors",
      "info": "Gradient replaces solid colors when set."
    },
    {
      "type": "color",
      "id": "background",
      "label": "Background"
    },
    {
      "type": "color_background",
      "id": "background_gradient",
      "label": "Background gradient"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text"
    },
    {
      "type": "header",
      "content": "Input colors",
      "info": "Applies to elements like quantity selector and variant selectors."
    },
    {
      "type": "color",
      "id": "input_background",
      "label": "Background",
      "default": "rgba(0,0,0,0)"
    },
    {
      "type": "color",
      "id": "input_text_color",
      "label": "Text"
    }
  ]
}
{% endschema %}